import { Connection, PublicKey, Keypair } from "@solana/web3.js";
import { Program, AnchorProvider, setProvider, BN, Idl } from "@coral-xyz/anchor";
import * as fs from 'fs';
import * as path from 'path';
import { getLaunchpadProgram } from "../hooks/useLaunchpadProgram/utils";

// Import SwarmData type
interface SwarmInfo {
    id: string;
    pool?: string;
    name: string;
    multiple: number;
    [key: string]: any; // Allow other properties
}

// Import SwarmData directly from the file
const SwarmData: SwarmInfo[] = [
    // The data will be read from info.tsx
];

try {
    const infoPath = path.join(__dirname, '../data/swarms/info.tsx');
    const fileContent = fs.readFileSync(infoPath, 'utf8');
    
    // Extract SwarmData array using regex
    const match = fileContent.match(/export const SwarmData: SwarmInfo\[\] = (\[[\s\S]*?\]);/);
    if (match) {
        // Parse the matched JSON array
        const swarmDataString = match[1].replace(/\n/g, '');
        Object.assign(SwarmData, JSON.parse(swarmDataString));
    }
} catch (error) {
    console.error('Error loading SwarmData:', error);
    process.exit(1);
}

const PROGRAM_ID = new PublicKey("4dWhc3nkP4WeQkv7ws4dAxp6sNTBLCuzhTGTf1FynDcf");
const RPC_URL = "https://api.mainnet-beta.solana.com";

interface PoolAccount {
    totalShares: BN;
    availableShares: BN;
}

interface PoolState {
    totalShares: BN;
    availableShares: BN;
}

// Simple wallet implementation
class SimpleWallet {
    constructor(readonly payer: Keypair) {}
    async signTransaction(tx: any) { return tx; }
    async signAllTransactions(txs: any[]) { return txs; }
    get publicKey() { return this.payer.publicKey; }
}

async function main() {
    // Setup connection and provider
    const connection = new Connection(RPC_URL);
    const wallet = new SimpleWallet(Keypair.generate()); // Read-only wallet
    const provider = new AnchorProvider(connection, wallet, {
        commitment: 'confirmed'
    });
    setProvider(provider);

    // Use the helper function to get the program
    const program = getLaunchpadProgram(provider, PROGRAM_ID);

    // Process each swarm
    for (const swarm of SwarmData) {
        if (!swarm.pool) continue;

        try {
            // Fetch pool data
            const poolPubkey = new PublicKey(swarm.pool);
            const poolData = await program.account.pool.fetch(poolPubkey) as unknown as PoolState;
            
            // Calculate sold shares
            const totalShares = poolData.totalShares.toNumber();
            const availableShares = poolData.availableShares.toNumber();
            const soldShares = totalShares - availableShares;
            
            // Calculate cycle and base price
            const cycle = Math.floor(soldShares / 5000);
            const multiple = Math.pow(1.35, cycle);
            
            console.log(`${swarm.name}: ${multiple}x multiple (${soldShares} shares sold)`);
            
            // Update the multiple in SwarmData
            swarm.multiple = Math.floor(multiple * 100) / 100; // Round to 2 decimal places
        } catch (error) {
            console.error(`Error processing ${swarm.name}:`, error);
        }
    }

    // Write updated data back to file
    const filePath = path.join(__dirname, '../data/swarms/info.tsx');
    const fileContent = `// Auto-generated by update-multiples.ts
import { SwarmInfo } from "@/components/swarms/swarm.types";
import { KinKongDescription } from "./descriptions/kinkong";
import { SwarmVenturesDescription } from "./descriptions/swarmventures";
import { TerminalVelocityDescription } from "./descriptions/terminalvelocity";
import { SyntheticSoulsDescription } from "./descriptions/syntheticsouls";
import { DuoAIDescription } from "./descriptions/duoai";

export const getSwarmUsingId = (swarmId: string) => SwarmData.find(swarm => swarm.id === swarmId);
export const getSwarmUsingPoolId = (poolId: string) => {
    // First try direct pool match
    const swarm = SwarmData.find(swarm => swarm.pool === poolId);
    if (swarm) return swarm;

    // If no direct match, try program.pool match
    return SwarmData.find(swarm => swarm.program?.pool === poolId);
};
export const getSwarmInfo = (swarmId: string) => SwarmData.find(swarm => swarm.id === swarmId);

export const SwarmData: SwarmInfo[] = ${JSON.stringify(SwarmData, null, 2)};`;

    fs.writeFileSync(filePath, fileContent);
    console.log('Multiples updated successfully!');
}

main().catch(console.error);
